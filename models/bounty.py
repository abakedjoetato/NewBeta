"""
Bounty model for Tower of Temptation PvP Statistics Bot

This module defines the Bounty data structure for player-placed bounties.
"""
import logging
import uuid
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, ClassVar, List

from models.base_model import BaseModel

logger = logging.getLogger(__name__)

class Bounty(BaseModel):
    """Player bounty data"""
    collection_name: ClassVar[str] = "bounties"
    
    # Bounty status constants
    STATUS_ACTIVE = "active"
    STATUS_CLAIMED = "claimed"
    STATUS_EXPIRED = "expired"
    STATUS_CANCELLED = "cancelled"
    
    # Bounty type constants
    TYPE_PLAYER = "player"  # Placed by a player
    TYPE_AUTO = "auto"      # Auto-generated by the system
    TYPE_ADMIN = "admin"    # Placed by an admin
    
    # Time constants (in seconds)
    DEFAULT_LIFESPAN = 3600  # 1 hour
    
    def __init__(
        self,
        bounty_id: Optional[str] = None,
        target_id: Optional[str] = None,
        target_name: Optional[str] = None,
        placed_by_id: Optional[str] = None,
        placed_by_name: Optional[str] = None,
        server_id: Optional[str] = None,
        amount: int = 0,
        status: str = STATUS_ACTIVE,
        bounty_type: str = TYPE_PLAYER,
        claimed_by_id: Optional[str] = None,
        claimed_by_name: Optional[str] = None,
        claimed_at: Optional[datetime] = None,
        expires_at: Optional[datetime] = None,
        created_at: Optional[datetime] = None,
        updated_at: Optional[datetime] = None,
        requirement: Optional[Dict[str, Any]] = None,
        **kwargs
    ):
        self._id = None
        self.bounty_id = bounty_id or str(uuid.uuid4())
        self.target_id = target_id
        self.target_name = target_name
        self.placed_by_id = placed_by_id
        self.placed_by_name = placed_by_name
        self.server_id = server_id
        self.amount = amount
        self.status = status
        self.bounty_type = bounty_type
        self.claimed_by_id = claimed_by_id
        self.claimed_by_name = claimed_by_name
        self.claimed_at = claimed_at
        self.expires_at = expires_at
        self.created_at = created_at or datetime.utcnow()
        self.updated_at = updated_at or datetime.utcnow()
        self.requirement = requirement or {}
        
        # Add any additional attributes
        for key, value in kwargs.items():
            if not hasattr(self, key):
                setattr(self, key, value)
    
    @classmethod
    async def get_by_bounty_id(cls, db, bounty_id: str) -> Optional['Bounty']:
        """Get a bounty by bounty_id
        
        Args:
            db: Database connection
            bounty_id: Bounty ID
            
        Returns:
            Bounty object or None if not found
        """
        document = await db.bounties.find_one({"bounty_id": bounty_id})
        return cls.from_document(document) if document else None
    
    @classmethod
    async def get_active_bounties(cls, db, server_id: Optional[str] = None) -> List['Bounty']:
        """Get all active bounties
        
        Args:
            db: Database connection
            server_id: Optional server ID to filter by
            
        Returns:
            List of active Bounty objects
        """
        query = {"status": cls.STATUS_ACTIVE}
        if server_id:
            query["server_id"] = server_id
            
        cursor = db.bounties.find(query)
        
        bounties = []
        async for document in cursor:
            bounties.append(cls.from_document(document))
            
        return bounties
    
    @classmethod
    async def get_active_bounties_for_target(cls, db, target_id: str) -> List['Bounty']:
        """Get all active bounties for a target
        
        Args:
            db: Database connection
            target_id: Target player ID
            
        Returns:
            List of active Bounty objects for the target
        """
        cursor = db.bounties.find({
            "target_id": target_id,
            "status": cls.STATUS_ACTIVE
        })
        
        bounties = []
        async for document in cursor:
            bounties.append(cls.from_document(document))
            
        return bounties
    
    @classmethod
    async def get_bounties_placed_by(cls, db, placed_by_id: str) -> List['Bounty']:
        """Get all bounties placed by a player
        
        Args:
            db: Database connection
            placed_by_id: Player ID who placed the bounties
            
        Returns:
            List of Bounty objects placed by the player
        """
        cursor = db.bounties.find({"placed_by_id": placed_by_id})
        
        bounties = []
        async for document in cursor:
            bounties.append(cls.from_document(document))
            
        return bounties
    
    @classmethod
    async def get_bounties_claimed_by(cls, db, claimed_by_id: str) -> List['Bounty']:
        """Get all bounties claimed by a player
        
        Args:
            db: Database connection
            claimed_by_id: Player ID who claimed the bounties
            
        Returns:
            List of Bounty objects claimed by the player
        """
        cursor = db.bounties.find({
            "claimed_by_id": claimed_by_id,
            "status": cls.STATUS_CLAIMED
        })
        
        bounties = []
        async for document in cursor:
            bounties.append(cls.from_document(document))
            
        return bounties
    
    async def claim(self, db, claimed_by_id: str, claimed_by_name: str) -> bool:
        """Claim a bounty
        
        Args:
            db: Database connection
            claimed_by_id: Player ID claiming the bounty
            claimed_by_name: Player name claiming the bounty
            
        Returns:
            True if claimed successfully, False otherwise
        """
        if self.status != self.STATUS_ACTIVE:
            return False
        
        # Cannot claim own bounty
        if claimed_by_id == self.placed_by_id:
            return False
            
        self.status = self.STATUS_CLAIMED
        self.claimed_by_id = claimed_by_id
        self.claimed_by_name = claimed_by_name
        self.claimed_at = datetime.utcnow()
        self.updated_at = datetime.utcnow()
        
        # Update in database
        result = await db.bounties.update_one(
            {"bounty_id": self.bounty_id},
            {"$set": {
                "status": self.status,
                "claimed_by_id": self.claimed_by_id,
                "claimed_by_name": self.claimed_by_name,
                "claimed_at": self.claimed_at,
                "updated_at": self.updated_at
            }}
        )
        
        return result.modified_count > 0
    
    async def expire(self, db) -> bool:
        """Expire a bounty
        
        Args:
            db: Database connection
            
        Returns:
            True if expired successfully, False otherwise
        """
        if self.status != self.STATUS_ACTIVE:
            return False
            
        self.status = self.STATUS_EXPIRED
        self.updated_at = datetime.utcnow()
        
        # Update in database
        result = await db.bounties.update_one(
            {"bounty_id": self.bounty_id},
            {"$set": {
                "status": self.status,
                "updated_at": self.updated_at
            }}
        )
        
        return result.modified_count > 0
    
    async def cancel(self, db) -> bool:
        """Cancel a bounty
        
        Args:
            db: Database connection
            
        Returns:
            True if cancelled successfully, False otherwise
        """
        if self.status != self.STATUS_ACTIVE:
            return False
            
        self.status = self.STATUS_CANCELLED
        self.updated_at = datetime.utcnow()
        
        # Update in database
        result = await db.bounties.update_one(
            {"bounty_id": self.bounty_id},
            {"$set": {
                "status": self.status,
                "updated_at": self.updated_at
            }}
        )
        
        return result.modified_count > 0
    
    @classmethod
    async def create_bounty(
        cls, 
        db, 
        target_id: str,
        target_name: str,
        placed_by_id: str,
        placed_by_name: str,
        server_id: str,
        amount: int,
        bounty_type: str = TYPE_PLAYER,
        lifespan_hours: float = 1.0,
        requirement: Optional[Dict[str, Any]] = None
    ) -> Optional['Bounty']:
        """Create a new bounty
        
        Args:
            db: Database connection
            target_id: Target player ID
            target_name: Target player name
            placed_by_id: Player ID placing the bounty
            placed_by_name: Player name placing the bounty
            server_id: Server ID
            amount: Bounty amount
            bounty_type: Bounty type (player, auto, admin)
            lifespan_hours: Bounty lifespan in hours
            requirement: Optional requirements for claiming the bounty
            
        Returns:
            Bounty object or None if creation failed
        """
        now = datetime.utcnow()
        expires_at = now + timedelta(hours=lifespan_hours)
        
        # Create bounty object
        bounty = cls(
            bounty_id=str(uuid.uuid4()),
            target_id=target_id,
            target_name=target_name,
            placed_by_id=placed_by_id,
            placed_by_name=placed_by_name,
            server_id=server_id,
            amount=amount,
            status=cls.STATUS_ACTIVE,
            bounty_type=bounty_type,
            expires_at=expires_at,
            created_at=now,
            updated_at=now,
            requirement=requirement or {}
        )
        
        # Insert into database
        try:
            await db.bounties.insert_one(bounty.to_document())
            return bounty
        except Exception as e:
            logger.error(f"Error creating bounty: {e}")
            return None
    
    @classmethod
    async def check_bounties_for_kill(cls, db, killer_id: str, victim_id: str) -> List['Bounty']:
        """Check if a kill satisfies any active bounties
        
        Args:
            db: Database connection
            killer_id: Killer player ID
            victim_id: Victim player ID
            
        Returns:
            List of bounties that were claimed
        """
        # Get active bounties for the victim
        bounties = await cls.get_active_bounties_for_target(db, victim_id)
        claimed_bounties = []
        
        for bounty in bounties:
            # Get hunter name
            try:
                hunter_doc = await db.players.find_one({"player_id": killer_id})
                hunter_name = hunter_doc.get("name", "Unknown Hunter") if hunter_doc else "Unknown Hunter"
            except Exception as e:
                logger.error(f"Error getting hunter name: {e}")
                hunter_name = "Unknown Hunter"
                
            # Claim the bounty
            if await bounty.claim(db, killer_id, hunter_name):
                claimed_bounties.append(bounty)
                
        return claimed_bounties
    
    @classmethod
    async def expire_old_bounties(cls, db) -> int:
        """Expire all bounties that have passed their expiration time
        
        Args:
            db: Database connection
            
        Returns:
            Number of bounties expired
        """
        now = datetime.utcnow()
        
        result = await db.bounties.update_many(
            {
                "status": cls.STATUS_ACTIVE,
                "expires_at": {"$lt": now}
            },
            {
                "$set": {
                    "status": cls.STATUS_EXPIRED,
                    "updated_at": now
                }
            }
        )
        
        return result.modified_count
    
    @classmethod
    async def get_player_stats_for_bounty(
        cls, 
        db, 
        player_id: str
    ) -> Dict[str, Any]:
        """Get bounty statistics for a player
        
        Args:
            db: Database connection
            player_id: Player ID
            
        Returns:
            Dictionary with bounty statistics
        """
        # Get active bounties on player
        active_bounties = await cls.get_active_bounties_for_target(db, player_id)
        total_active_value = sum(b.amount for b in active_bounties)
        
        # Get claimed bounties
        claimed_bounties = await cls.get_bounties_claimed_by(db, player_id)
        total_claimed_value = sum(b.amount for b in claimed_bounties)
        
        # Get placed bounties
        placed_bounties = await cls.get_bounties_placed_by(db, player_id)
        total_placed_value = sum(b.amount for b in placed_bounties)
        
        return {
            "active_bounties": len(active_bounties),
            "active_bounties_value": total_active_value,
            "claimed_bounties": len(claimed_bounties),
            "claimed_bounties_value": total_claimed_value,
            "placed_bounties": len(placed_bounties),
            "placed_bounties_value": total_placed_value
        }